" Use spacebar for leader key, instead of '\'.
let mapleader="\<SPACE>"

" Turn off the search highlight.
nnoremap <leader><space> :nohlsearch<CR>

" Map ctrl-h/j/k/l to move between split windows.
map <c-h> <c-w>j<c-w>_
map <c-j> <c-w>j<c-w>_
map <c-k> <c-w>k<c-w>_
map <c-l> <c-w>l<c-w>_

" Delete a selection w/o updating the buffer.
vnoremap x "_x
vnoremap X "_X

" Toggle 'slf/gundo.vim'
nnoremap <leader>u :GundoToggle<CR>

" Toggle 'rking/ag.vim'
nnoremap <leader>a :Ag

" Navigate between Ale warnings & errors.
"nmap <silent> <C-K> <Plug>(ale_previous_wrap)
"nmap <silent> <C-J> <Plug>(ale_next_wrap)
"

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn

    " Strip trailing whitespace from all files. See the configuration in
    " plugins.vimrc for a blacklist of filetypes.
    autocmd BufEnter * EnableStripWhitespaceOnSave

    " Allow word wrapping for some filetypes.
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd FileType markdown setlocal wrap
    autocmd FileType markdown setlocal conceallevel=0

    " YAML style is 2-space indenting.
    autocmd FileType yaml setlocal tabstop=2
    autocmd FileType yaml setlocal shiftwidth=2
    autocmd FileType yaml setlocal softtabstop=2
    autocmd FileType yaml setlocal commentstring=#\ %s

    " Bash style is 2-space indenting.
    autocmd FileType sh setlocal tabstop=2
    autocmd FileType sh setlocal shiftwidth=2
    autocmd FileType sh setlocal softtabstop=2
    autocmd FileType sh setlocal commentstring=#\ %s

    " Ruby style is 2-space indenting.
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s

    autocmd FileType python setlocal commentstring=#\ %s

    " Map unknown files to known filetypes.
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter *.launch setlocal filetype=xml " ROS .launch files are XML
    autocmd BufEnter *.bats set filetype=sh

    " Makefiles need to keep their tabs.
    autocmd BufEnter Makefile setlocal noexpandtab
augroup END

" Required.
filetype plugin indent on
syntax enable

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = "solarized"
"let g:airline_solarized_bg='dark'

" vim-colors-solarized
colorscheme solarized
set background=light

" vim-better-whitespace
let g:better_whitespace_filetypes_blacklist = ['diff', 'gitcommit'] " Filetypes to skip stripping of whitespace.
let g:strip_whitelines_at_eof=1
let g:show_spaces_that_precede_tabs=1
let g:strip_whitespace_confirm=0
let g:strip_whitespace_on_save = 1

" ale - this is how to disable it.
"let g:ale_lint_on_text_changed = 'always'       " When to lint if text changes (always (default)|insert|normal|never).
"let g:ale_lint_on_enter = 0                    " Don't lint when opening a file.
"let g:ale_lint_on_save = 0                     " Don't lint when saving a file.
let g:ale_fix_on_save = 1                       " Apply fixers (formatters) to files on save.
let g:ale_sign_error = '>>'                     " Error sigil in gutter.
let g:ale_sign_warning = '--'                   " Warning sigil in gutter.
let g:ale_sign_column_always = 1                " Always show the gutter.
"let g:ale_ruby_rubocop_options = ''            " https://rubocop.readthedocs.io/en/latest/configuration/
let g:ale_python_flake8_executable = 'flake8'   " Use Python3 linter:
let g:ale_python_flake8_options = '--max-line-length 88'   " https://github.com/w0rp/ale/blob/master/doc/ale-python.txt
"let g:ale_python_flake8_executable = 'python3'  " Use Python3 linter:
"let g:ale_python_flake8_options = '-m flake8 --max-line-length 88'   " https://github.com/w0rp/ale/blob/master/doc/ale-python.txt
let g:ale_sh_shell_default_shell = 'bash'       " We use non-standard #! for Bash, assume all shell files are Bash.
let g:ale_sh_shellcheck_options = '-s bash -e SC1008' " Force shellcheck to always assume Bash, and ignore warning about unsupported #!.
let g:ale_sh_shfmt_options = "-i 2 -ci -sr -kp" " Make `shfmt` pretty.
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_rls_toolchain = "stable"

let g:ale_linters = {
\ 'rust': ['rls', 'cargo'],
\}

let g:ale_fixers = {
\ 'python': ['black'],
\ 'rust': ['rustfmt'],
\ 'sh': ['shfmt'],
\}

"highlight ALEWarning ctermfg=13
"highlight ALEError ctermfg=5

" camelcasemotion
let g:camelcasemotion_key = '<leader>'

" elmcast/elm-vim
let g:elm_jump_to_error = 0
let g:elm_make_output_file = "elm.js"
let g:elm_make_show_warnings = 0
let g:elm_syntastic_show_warnings = 0
let g:elm_browser_command = ""
let g:elm_detailed_complete = 0
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 0
let g:elm_setup_keybindings = 1

"set autoindent             " Always enable auto-indenting.
"set clipboard=unnamed      " Use system clipboard.
"set laststatus=2           " Always have a status bar.
"set nowrap                 " Stop word wrapping.
"set scrolloff=1            " Space above cursor from screen edge.
"set sidescrolloff=5        " Space beside cursor from screen edge.
"set cursorcolumn           " Highlight the current column.
"set cursorline             " Highlight the current line.
"set lazyredraw             " Redraw only when needed, speeds up macros.
"set conceallevel=0         " Don't hide characters.
set encoding=utf8          " Set standard file encoding.
set mouse=a                " Enable the mouse.
set nobackup               " Don't keep a backup file
set noerrorbells           " Be quiet.
set noswapfile             " Don't use swap files.
set showmatch              " Show matching brackets.
set undolevels=100         " Adjust system undo levels.
set wmh=0                  " Set smallest possible window when minimizing a split window.
set number                 " Turn on line numbers.
set relativenumber         " Show the line numbers as relative.

"set spell                  " Enable spell check.
"set spellcapcheck=         " Disable capitalization check.

" Fix behavior to continue comments on new lines, default is: tcqj
" :help fo-table
set formatoptions=tcrq

" Enable wildmenu support, which autocompletes commmands.
set wildmenu
set wildmode=list:longest,full " list all options, match to the longest

" Set tab width & convert tabs to spaces.
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

" Support folding.
set foldenable             " Enable folding.
"set foldcolumn=2           " Reserve space for the fold.
set foldlevelstart=99      " All folds are open by default.
set foldmethod=indent      " Use indenting to determine folds.
"set foldmethod=syntax      " Use syntax rules to determine folds.

" Searching.
set hlsearch               " Use search highlighting.
set ignorecase             " Do case insensitive searching.
set incsearch              " Perform incremental searching.
set smartcase              " Ignore case unless case is used.

" Move up/down over wrapped lines in a nice manner.
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

" Restore cursor style on exit.
au VimLeave * set guicursor=a:hor25-blinkon0

" Use fzf
set rtp+=/usr/local/opt/fzf
