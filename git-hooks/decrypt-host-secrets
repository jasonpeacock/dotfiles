#!/usr/bin/env bash
#
# Unpack and decrypt an archive containing an encrypted file, using the host's SSH key.
#
# Intended to be used as a 'post-merge' git hook.
#
# Use `encrypt-host-secrets` to create archives with an encrypted file.
#
# NOTES:
#     * The <hostname> is only the first part, e.g. "foo" of "foo.bar.com".
#
# mycastle/secrets/hosts/snacker/some/path/secret.txt.tgz
#
# The <hostname>'s secrets will be unpacked & decrypted, then copied to the equivalent path
# in the secrets/generated directory:
#
# mycastle/secrets/generated/some/path/secret.txt
#
# Where a symlink should be in the appropriate place in home/ pointing back at the
# generated secret:
#
# mycastle/home/some/path/config -> ../../../secrets/generated/some/path/config
#

# Load git specific env variables - most importantly, GIT_DIR.
# shellcheck disable=SC1090
source "$(git --exec-path)/git-sh-setup"

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# A `mktemp -d` that works on both OSX & Linux.
# https://unix.stackexchange.com/a/84980
TEMP_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')"

# Remove the temp dir.
function cleanup {
    rm -r "${TEMP_DIR}"
}

# Ensure temp dir is always removed.
trap cleanup EXIT

HOSTNAME="$(hostname)"

# Only the first part of the hostname is used to find the configuration
# files for that host.
HOSTNAME=${HOSTNAME%%.*}

# Where to find the hostname-based secrets.
SECRET_DIR_BASE="${GIT_DIR}/../secrets/hosts/${HOSTNAME}"

# Where to save the decrypted secrets.
TARGET_DIR_BASE="${GIT_DIR}/../secrets/generated"

# The host's SSH key for this account.
SSH_KEY="${HOME}/.ssh/id_rsa"

# Remove any old files.
echo "Removing existing secrets from [${TARGET_DIR_BASE}]"
rm -rf "${TARGET_DIR_BASE:?}"/*

# Copy the secrets into their target locations & decrypt them.
echo -e "\nHostname is [${HOSTNAME}], installing host-specific secrets..."
secrets=$(find "${SECRET_DIR_BASE}" -type f -print)
for secret in ${secrets}; do
    # Replace the secret's SECRET_DIR_BASE with TEMP_DIR to generate the
    # target filename.
    temp="${TEMP_DIR}${secret#${SECRET_DIR_BASE}}"

    # Discard the last '/' delimited section, which was filename.
    temp_path="${temp%/*}"

    mkdir -p "${temp_path}" && cp "${secret}" "${temp}"

    # Discard the '.tgz' extension.
    name="${temp%.*}"

    # Discard the path.
    name="${name##*/}"

    # Unpack & decrypt the secret.
    echo -e "Unpacking & decrypting secret [${secret}] into"
    echo -e "\t[${temp_path}] as [${name}]"
    tar \
        -xzvf "${temp}" \
        -C "${temp_path}"

    # Decrypt the key using the host's SSH key:
    openssl \
        rsautl \
        -decrypt \
        -oaep \
        -inkey "${SSH_KEY}" \
        -in "${temp_path}/${name}.key.enc" \
        -out "${temp_path}/${name}.key"

    # Decrypt the secret using foo.key:
    openssl \
        aes-256-cbc \
        -d \
        -in "${temp_path}/${name}.enc" \
        -out "${temp_path}/${name}" \
        -pass "file:${temp_path}/${name}.key"

    # Replace the secret's SECRET_DIR_BASE with TARGET_DIR_BASE to generate the
    # target filename.
    target="${TARGET_DIR_BASE}${secret#${SECRET_DIR_BASE}}"

    # Discard the last '/' delimited section, which was filename.
    path="${target%/*}"

    echo -e "Installing secret [${name}] to"
    echo -e "\t[${path}/${name}]"

    mkdir -p "${path}" && cp "${temp_path}/${name}" "${path}/${name}"
done

exit 0
