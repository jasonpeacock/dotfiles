#!/usr/bin/env bash
#
# Create an archive containing an encrypted file, using the host's SSH key.
#
# Use `decrypt-host-secrets` directly, or as a post-merge git hook, to decrypt
# & install the file to `secrets/generated/...`.
#
# Example usage:
#
# ./encrypt-host-secrets README.md foo/bar
#
# Will create the archive:
#
# mycastle/secrets/hosts/snacker/README.md.tgz
#
# The archive contains the following files:
#
# README.md.enc      <-- encrypted file
# README.md.key.enc  <-- encrypted key for encrypted file

# Load git specific env variables - most importantly, GIT_DIR.
# shellcheck disable=SC1090
source "$(git --exec-path)/git-sh-setup"

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

if [ $# -lt 2 ]; then
    echo >&2 "Missing arguments!"
    echo >&2 "Usage: ${0} <filename> <path relative to home>"
    exit 1
fi

# Filename of the secret.
SECRET="${1}"

# Path relative to home/ for installation.
SECRET_HOME_PATH="${2}"

# A `mktemp -d` that works on both OSX & Linux.
# https://unix.stackexchange.com/a/84980
TEMP_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')"

# Remove the temp dir.
function cleanup {
    rm -r "${TEMP_DIR}"
}

# Ensure temp dir is always removed.
trap cleanup EXIT

HOSTNAME="$(hostname)"

# Only the first part of the hostname is used to find the configuration
# files for that host.
HOSTNAME=${HOSTNAME%%.*}

# Where to find the hostname-based secrets.
SECRET_DIR_BASE="${GIT_DIR}/../secrets/hosts/${HOSTNAME}"

# The host's SSH key for this account.
SSH_KEY="${HOME}/.ssh/id_rsa"

# Encrypt the secret and copy into the archive locations.
echo -e "\nHostname is [${HOSTNAME}], creating host-specific secret..."

# Discard the path.
name="${SECRET##*/}"

#name="${TEMP_DIR}/${name}"

name_archive="${name}.tgz"
name_enc="${name}.enc"
name_key="${name}.key"
name_key_enc="${name_key}.enc"

echo -e "Encrypting & archiving secret [${SECRET}] as"
echo -e "\t${name_archive}"

# Generate a symmetric key.
openssl \
    rand 32 \
    -out "${TEMP_DIR}/${name_key}"

# Encrypt the secret with the new symmetric key.
openssl \
    aes-256-cbc \
    -in "${SECRET}" \
    -out "${TEMP_DIR}/${name_enc}" \
    -pass "file:${TEMP_DIR}/${name_key}"

# Encrypt the symmetric key with the host's private SSH key.
openssl \
    rsautl \
    -encrypt \
    -oaep \
    -pubin \
    -inkey <(openssl rsa -in "${SSH_KEY}" -pubout) \
    -in "${TEMP_DIR}/${name_key}" \
    -out "${TEMP_DIR}/${name_key_enc}"

# Ensure the archive location has the full path available.
mkdir -p "${SECRET_DIR_BASE}/${SECRET_HOME_PATH}"

# Bundle the encrypted secret & encrypted key together, directly into
# the archive location.
tar \
    -czvf "${SECRET_DIR_BASE}/${SECRET_HOME_PATH}/${name_archive}" \
    -C "${TEMP_DIR}" \
    "${name_enc}" \
    "${name_key_enc}"

exit 0
